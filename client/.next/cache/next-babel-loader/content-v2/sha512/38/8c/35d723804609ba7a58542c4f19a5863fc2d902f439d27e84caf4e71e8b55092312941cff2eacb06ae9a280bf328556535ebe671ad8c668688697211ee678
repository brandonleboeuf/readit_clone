{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useContext, useEffect, useReducer } from 'react';\nimport Axios from 'axios';\nconst StateContext = /*#__PURE__*/createContext({\n  authenticated: false,\n  user: null,\n  loading: true\n});\nconst DispatchContext = /*#__PURE__*/createContext(null);\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case 'LOGIN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        authenticated: true,\n        user: payload\n      });\n\n    case 'LOGOUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        authenticated: false,\n        user: null\n      });\n\n    case 'STOP_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n};\n\nexport const AuthProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: defaultDispatch\n  } = useReducer(reducer, {\n    user: null,\n    authenticated: false,\n    loading: true\n  });\n\n  const dispatch = (type, payload) => defaultDispatch({\n    type,\n    payload\n  });\n\n  useEffect(() => {\n    async function loadUser() {\n      try {\n        const res = await Axios.get('/auth/me');\n        dispatch('LOGIN', res.data);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        dispatch('STOP_LOADING');\n      }\n    }\n\n    loadUser();\n  }, []);\n  return /*#__PURE__*/_jsx(DispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsx(StateContext.Provider, {\n      value: state,\n      children: children\n    })\n  });\n};\nexport const useAuthState = () => useContext(StateContext);\nexport const useAuthDispatch = () => useContext(DispatchContext);","map":null,"metadata":{},"sourceType":"module"}